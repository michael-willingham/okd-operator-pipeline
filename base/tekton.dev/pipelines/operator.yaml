apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: operator
  namespace: okd-team
spec:
  params:
    - name: repo-url
      description: The repo url
      type: string
    - name: repo-ref
      description: The repo ref
      type: string
    - name: base-image-registry
      description: The base image registry
      type: string
    - name: image-name
      description: The image name
      type: string
    - name: image-version
      description: The image version
      type: string
    - name: build-image
      description: The build image
      type: string
      default: quay.io/okderators/bundle-tools:vdev
    - name: channel
      description: The channel
      type: string
    - name: default-channel
      description: The default channel
      type: string
    - name: enable-timestamp
      description: Enable timestamp
      type: string
      default: "true"
    - name: env-map
      description: The env map
      type: string
      default: ""
  
  workspaces:
    - name: workspace
    - name: patches

  tasks:
    - name: clone-and-patch
      taskRef:
        name: git-clone
      params:
        - name: url
          value: $(params.repo-url)
        - name: deleteExisting
          value: 'true'
        - name: revision
          value: $(params.repo-ref)
        - name: verbose
          value: 'true'
        - name: subdirectory
          value: repository
      workspaces:
        - name: output
          workspace: workspace
        - name: patches
          workspace: patches

    - name: get-id
      taskRef:
        name: build-id
      params:
        - name: version
          value: $(params.image-version)
        - name: enable-timestamp
          value: $(params.enable-timestamp)

    - name: install
      runAfter: [ clone-and-patch, get-id ]
      taskRef:
        name: make
      params:
        - name: image
          value: $(params.build-image)
        - name: subdirectory
          value: repository
        - name: args
          value: ["okd-install"]
        - name: version
          value: $(tasks.get-id.results.build-id)
        - name: env-map
          value: $(params.env-map)=
      workspaces:
        - name: work
          workspace: workspace

    - name: lint
      runAfter: [ install ]
      taskRef:
          name: make
      params:
          - name: image
            value: $(params.build-image)
          - name: subdirectory
            value: repository
          - name: args
            value: [ "okd-lint" ]
          - name: env-map
            value: $(params.env-map)
      workspaces:
          - name: work
            workspace: workspace

    - name: build
      runAfter: [ lint ]
      taskRef:
        name: make
      params:
        - name: image
          value: $(params.build-image)
        - name: subdirectory
          value: repository
        - name: args
          value: [ "okd-build" ]
        - name: version
          value: $(tasks.get-id.results.build-id)
        - name: env-map
          value: $(params.env-map)
      workspaces:
        - name: work
          workspace: workspace

    - name: test
      runAfter: [ build ]
      taskRef:
        name: make
      params:
        - name: image
          value: $(params.build-image)
        - name: subdirectory
          value: repository
        - name: args
          value: [ "okd-test" ]
        - name: version
          value: $(tasks.get-id.results.build-id)
        - name: env-map
          value: $(params.env-map)
      workspaces:
        - name: work
          workspace: workspace

    - name: build-operator
      runAfter: [ test ]
      taskRef:
        name: buildah-build
      params:
        - name: image
          value: $(params.image-name)
        - name: subdirectory
          value: repository
      workspaces:
        - name: source
          workspace: workspace
        - name: containers
          workspace: workspace

    - name: push-operator
      runAfter: [ build-operator, get-id ]
      taskRef:
        name: buildah-push
      params:
        - name: image
          value: $(params.image-name)
        - name: remote
          value: $(params.base-image-registry)/$(params.image-name):v$(tasks.get-id.results.build-id)
      workspaces:
        - name: containers
          workspace: workspace

    - name: make-bundle
      runAfter: [ push-operator, clone-and-patch, get-id ]
      taskRef:
        name: make
      params:
        - name: image
          value: $(params.build-image)
        - name: args
          value: [ "okd-bundle" ]
        - name: version
          value: $(tasks.get-id.results.build-id)
        - name: subdirectory
          value: repository
        - name: normalized-version
          value: $(params.image-version)
        - name: env-map
          value: $(params.env-map)
      workspaces:
        - name: work
          workspace: workspace

    - name: build-bundle
      runAfter: [ make-bundle ]
      taskRef:
        name: buildah-build
      params:
        - name: image
          value: $(params.image-name)-bundle
        - name: dockerfile
          value: bundle.Dockerfile
        - name: subdirectory
          value: repository
      workspaces:
        - name: source
          workspace: workspace
        - name: containers
          workspace: workspace

    - name: push-bundle
      runAfter: [ build-bundle ]
      taskRef:
        name: buildah-push
      params:
        - name: image
          value: $(params.image-name)-bundle
        - name: remote
          value: $(params.base-image-registry)/$(params.image-name)-bundle:v$(tasks.get-id.results.build-id)
      workspaces:
        - name: containers
          workspace: workspace

#    - name: deploy-bundle
#      runAfter: [container-all]
#      taskRef:
#        name: bundle
#      params:
#        - name: repo-name
#          value: $(params.repo-name)
#        - name: base-image-registry
#          value: $(params.base-image-registry)
#        - name: bundle-version
#          value: $(params.bundle-version)
#        - name: channel
#          value: $(params.channel)
#        - name: default-channel
#          value: $(params.default-channel)
#        - name: catalog-image
#          value: $(params.catalog-image)
#      workspaces:
#        - name: src
#          workspace: shared-workspace
#        - name: build-cache-root
#          workspace: shared-workspace
